Grow concurrent programs with grace and Go
Go-Tuto@CC-IN2P3, 2017-02-17

Sebastien Binet
CNRS/IN2P3/LPC-Clermont
https://github.com/sbinet
@0xbins
sebastien.binet@clermont.in2p3.fr

* Parallelism: why?

.image _figs/cpu-free-lunch.png 550 550

* (a brief) History of software in HEP

* 50's-90's: FORTRAN77

#.code _code/hello.f
.play _code/hello.f.go /START OMIT/,/END OMIT/

 $ gfortran -c hello.f && gfortran -o hello hello.o
 $ ./hello
 Hello from FORTRAN

- `FORTRAN77` is the *king*
- 1964: *CERNLIB*
- REAP (paper tape measurements), THRESH (geometry reconstruction)
- SUMX, *HBOOK* (statistical analysis chain)
- ZEBRA (memory management, I/O, ...)
- GEANT3, *PAW*

* 90's-...: C++

#.code _code/hello.cxx
.play _code/hello.cxx.go /START OMIT/,/END OMIT/

 $ c++ -o hello hello.cxx && ./hello
 Hello from C++
 
.image _figs/my-root6splash.png 190 190

- object-oriented programming (OOP) is the cool kid on the block
- *ROOT*, POOL, LHC++, AIDA, *Geant4*
- `C++` takes roots in HEP

* 00's-...: python

#.code _code/hello.py
.play _code/hello.py.go /START OMIT/,/END OMIT/

 $ python ./hello.py
 Hello from python
 
.image _figs/my-python-logo.png 100 250

- `python` becomes the _de_ _facto_ scripting language in HEP
- framework data-cards
- analysis glue, (whole) analyses in `python`
- *PyROOT*, rootpy
- numpy, scipy, matplotlib, *IPython/Jupyter*

* Current software in a nutshell

- *Generators*: generation of true particles from fondamental physics first principles
- *Full* *Simulation*: tracking of all stable particles in magnetic field through the detector simulating interaction, recording energy deposition (*CPU* *intensive*)
- *Reconstruction*: from real data, or from `Monte-Carlo` simulation data as above
- *Fast* *Simulation*: parametric simulation, faster, coarser
- *Analysis*: daily work of physicists, running on output of reconstruction to derive analysis specific information (*I/O* *intensive*)
- everything in the same `C++` offline control framework (except analysis)

.image _figs/data-flux-summary-all.png 210 800


* 

- `C++`: *slow* (very slow?) to compile/develop, *fast* to execute
- `python`: *fast* development cycle (no compilation), *slow* to execute
# (can be mitigated if leveraging/rewriting(parts in) `C++`. more work)

.image _figs/xkcd-compiling.png 400 400

* Are those our only options ?

.image _figs/funfast-nogo.svg 500 _


* Meanwhile on the Hardware side...

* Moore's law

.image _figs/cpu-free-lunch.png 550 550

* The hardware/software contract

.image _figs/par-prog-old-days.png _ 850

* Hardware diversity: combining building blocks

.image _figs/par-prog-heterogeneous.png

* Moore's law

- Moore's law still observed at the hardware level
- *However* the _effective_ perceived computing power is mitigated

_"Easy_ _life"_ during the last 20-30 years:

- Moore's law translated into *doubling* compute capacity every ~18 months (_via_ clock frequency)
- *Concurrency* and *parallelism* necessary to efficiently harness the compute power of our new multi-core CPU architectures.

_But_ our current software isn't prepared for parallel/concurrent environments.


* Free lunch is over

.image _figs/head-on.png _ 900

* Interlude: concurrency & parallelism

* Interlude: Sequential, Concurrent & Parallel pizzas

* Pizza recipe

(*Disclaimer:* don't ever eat any pizza prepared or cooked by me.)

How to prepare a (sequential) pizza?

.code _code/make-pizza.f

Estimated time (1 chef, 1 pizza):

  xx-oooo-xxx-oo-###

How to make this faster?

* (Sequential) Pizza recipe
 
Tasks:

- wash tomatoes and onions
- cut tomatoes, onions
- prepare pizza dough
- put tomato sauce on top of pizza dough
- toppings: put tomatoes, onions, ham and mozarella
- (pre-)heat oven, bake
- (cut, then eat)

Estimated time (1 chef, 1 pizza):

  xx-oooo-xxx-oo-###

* Concurrent pizzas - Parallel pizzas

Estimated time (1 chef, 1 kitchen, 2 pizzas):

  xx-oooo-xxx-oo-###-xx-oooo-xxx-oo-###

Estimated time (1 chef, 2 kitchens, 2 pizzas):

  xx-oooo-xxx-oo+###
                +xx-oooo-xxx-oo-###

Estimated time (2 chefs, 1 kitchen, 2 pizzas):

  xx-xxx-+-xx-xxx-+
         +###     +###
  oooo-oo+-oooo-oo+

Estimated time (2 chefs, 2 kitchens, 2 pizzas):

  xx-oooo-xxx-oo-###
  xx-oooo-xxx-oo-###

* Interlude: concurrency & parallelism

- *Concurrency* is about _dealing_ with lots of things at once.
- *Parallelism* is about _doing_ lots of things at once.
- Not the same, but related.
- Concurrency is about _structure_, parallelism is about _execution_.

.image _figs/conc-para.png 200 600

Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.
Communication is the means to coordinate the independent executions.

* Concurrency vs Parallelism

Concurrency is about dealing with lots of things at once.
Parallelism is about doing lots of things at once.

Concurrency is about (program) *structure*.
Parallelism is about (program) *execution*.

.image _figs/conc-vs-par-prog.png 300 _

Concurrency is *not* parallelism, it's better :)

* Concurrency plus communication

Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.

Communication is the means to coordinate the independent executions.

This is the Go model and (like Erlang and others) it's based on CSP:

C. A. R. Hoare: Communicating Sequential Processes (CACM 1978)

* Concurrency strategies

* Multi-processing

Launch _N_ instances of an application on a node with _N_ cores

- re-use pre-existing code
- _a_ _priori_ no required modification of pre-existing code
- satisfactory _scalability_ with the number of cores

*But:*

- resource requirements increase with the number of processes
- memory footprint *increases*
- as do other O/S (limited) resources (file descriptors, network sockets, ...)
- scalability of *I/O* debatable when number of cores > ~100


* Multi-threading

.image _figs/mt-cxx.png

`C++11/14` libraries do help a bit:
- `std::lambda`, `std::thread`, `std::promise`
- (Intel) Threading Building Blocks
- ...

* Time for a new language ?

.image _figs/new-lang.png 600 800

* Candidates

- python/pypy
- FORTRAN-2008
- Vala
- Swift
- Rust
- Go
- Chapel
- Scala
- Haskell
- Clojure

* Let's Go

* What is Go ?

#.play _code/hello.go
.play _code/hello.go.go /START OMIT/,/END OMIT/

 $ go run hello.go
 Hello from Go

A nice language with a nice mascot.

.image _figs/golang-logo.png 200 400


* History

- Project starts at Google in 2007 (by Griesemer, Pike, Thompson)
- Open source release in November 2009
- More than 700 contributors have joined the project
- Version 1.0 release in March 2012
- Version 1.1 release in May 2013
- Version 1.2 release in December 2013
- _[...]_
- Version 1.6 release in February 2016
- Version 1.7 release in August 2016
- Version 1.8 release in February 2017

.link https://golang.org

* Elements of Go

- Founding fathers: Russ Cox, Robert Griesemer, Ian Lance Taylor, Rob Pike, Ken Thompson


- Concurrent, garbage-collected
- An Open-source general progamming language (BSD-3)
- feel of a *dynamic* *language*: limited verbosity thanks to the _type_ _inference_ _system_, map, slices
- safety of a *static* *type* *system*
- compiled down to machine language (so it is fast, goal is ~10% of C)
- *object-oriented* but w/o classes, *builtin* *reflection*
- first-class functions with *closures*
- implicitly satisfied *interfaces*

Available on all major platforms (`Linux`, `Windows`, `macOS`, `Android`, `iOS`, ...) and for many architectures (`amd64`, `arm`, `arm64`, `i386`, `s390x`, `mips64`, ...)

* Packages

* Packages

Every Go source file, e.g. `"encoding/json/json.go"`, starts like:

  package json

where `json` is the "package name", an identifier.
Package names are usually concise.

To use a package, need to identify it by path:

  import "encoding/json"

And then the package name is used to qualify items from package:

  var dec = json.NewDecoder(reader)

Clarity: can always tell if name is local to package from its syntax: `Name` vs. `pkg.Name`.
(More on this later.)
Package combines properties of library, name space, and module.

* Package paths are unique, not package names

The path is `"encoding/json"` but the package name is `json`.
The path identifies the package and must be unique. 
Project or company name at root of name space.

  import "go-hep.org/x/hep/rand"

Package name might not be unique; can be overridden. These are both package `rand`:

  import "math/rand"                     // Standard package
  import heprand "go-hep.org/x/hep/rand" // HEP-specific package

Every HEP experiment might have its own `rand` package; no need to make the package name unique.

* Remote packages

Package path syntax works with remote repositories. 
The import path is just a string.

Can be a file, can be a URL:

  $> go get go-hep.org/x/hep/hbook  ## Command to fetch, compile and install a package
                                    ## (and its dependencies)

  import "go-hep.org/x/hep/hbook"   // go-hep HBOOK's import statement

  var hist hbook.H1D                // Client's use of package

* Syntax

* Syntax

Syntax is not important...

- unless you're programming
- or writing tools

Tooling is essential, so Go has a clean syntax. 
Not super small, just clean:

- regular (mostly)
- only 25 keywords
- straightforward to parse (no type-specific context required)
- easy to predict, reason about

_The_readability_of_programs_is_immeasurably_more_important_than_their_writeability._
Hints on Programming Language Design 
C. A. R. Hoare 1973

* Declarations

Uses Pascal/Modula-style syntax: name before type, more type keywords.

  var fn func([]int) int
  type T struct { a, b int }

not

  int (*fn)(int[]);
  struct T { int a, b; }

Easier to parseâ€”no symbol table needed. Tools become easier to write.
One nice effect: can drop var and derive type of variable from expression:

  var buf *bytes.Buffer = bytes.NewBuffer(x) // explicit
  buf := bytes.NewBuffer(x)                  // derived

For more information:

.link https://golang.org/s/decl-syntax

* Function syntax

Function on type T:

  func Abs(t T) float64

Method of type T:

  func (t T) Abs() float64

Variable (closure) of type T:

  negAbs := func(t T) float64 { return -Abs(t) }

In Go, functions can return multiple values. Common case: `error`.

  func ReadByte() (c byte, err error)
  
  c, err := ReadByte()
  if err != nil { ... }

* Naming

* Export syntax

Simple rule:

- upper case initial letter: `Name` is visible to clients of package
- otherwise: `name` (or `_Name`) is not visible to clients of package

Applies to variables, types, functions, methods, constants, fields....

That Is It.

One of the most important things about the language.

Can see the visibility of an identifier without discovering the declaration.

Clarity.

* Object-oriented programming

* OOP requires very little extra programming language support

We only need:

- the notion of an _Object_,
- a mechanism to interact with these objects (_Methods_),
- and support for polymorphism (_Interfaces_).

* Object-oriented programming in Go

Methods without classes
Interfaces without hierarchies
Code reuse without inheritance

Specifically:

- Any _value_ can be an _object_
- Any _type_ can play the role of a _class_
- _Methods_ can be attached to any _type_
- _Interfaces_ implement polymorphism.

* Methods

.play _code/methods.go

* Methods can be attached to any type

.play _code/methods-any-type.go

* Interfaces

.code _code/ifaces.go

An interface defines a set of methods. 
A type that implements all methods of an interface is said to implement the interface. 
All types implement the empty interface `interface{}`.

* Dynamic dispatch

.play _code/interface.go /START/,/STOP/

A value (here: `corner`, `boiling`) of a type (`Point`, `Celsius`) that implements 
an interface (`Stringer`) can be assigned to a variable (`v`) of that interface type.

* Composition and chaining

Typically, interfaces are small (1-3 methods).

Pervasive use of key interfaces in the standard library make it easy to chain APIs together.

  package io
  func Copy(dst Writer, src Reader) (int64, error)

The `io.Copy` function copies by reading from any `Reader` and writing to any `Writer`.

Interfaces are often introduced ad-hoc, and after the fact.

There is no explicit hierarchy and thus no need to design one!

* my-gunzip

.code _code/gunzip.go

* Interfaces in practice

Methods on any types and _ad_hoc_ interfaces make for a light-weight OO programming style.

Go interfaces enable post-facto abstraction.

No explicit type hierarchies.

"Plug'n play" in a type-safe way.


* Concurrency: basic examples

* A boring function

We need an example to show the interesting properties of the concurrency primitives.
To avoid distraction, we make it a boring example.

.play _code/boring.go /START/,/STOP/

* Slightly less boring

Make the intervals between messages unpredictable (still under a second).

.play _code/lessboring.go /START/,/STOP/

* Running it

The boring function runs on forever, like a boring party guest.

.play _code/lessboring.go /^func.main/,$

* Ignoring it

The `go` statement runs the function as usual, but doesn't make the caller wait.

It launches a goroutine.

The functionality is analogous to the `&` on the end of a shell command.

.play _code/goboring.go 1,/^}/


* Ignoring it a little less

When `main` returns, the program exits and takes the boring function down with it.

We can hang around a little, and on the way show that both main and the launched goroutine are running.

.play _code/waitgoboring.go /func.main/,/^}/

* Goroutines

What is a goroutine? It's an independently executing function, launched by a go statement.

It has its own call stack, which grows and shrinks as required.

It's very cheap. It's practical to have thousands, even hundreds of thousands of goroutines.

It's not a thread.

There might be only one thread in a program with thousands of goroutines.

Instead, goroutines are multiplexed dynamically onto threads as needed to keep all the goroutines running.

But if you think of it as a very cheap thread, you won't be far off.

* Communication

Our boring examples cheated: the main function couldn't see the output from the other goroutine.

It was just printed to the screen, where we pretended we saw a conversation.

Real conversations require communication.

* Channels

A channel in Go provides a connection between two goroutines, allowing them to communicate.

.code _code/helpers.go /START1/,/STOP1/
.code _code/helpers.go /START2/,/STOP2/
.code _code/helpers.go /START3/,/STOP3/

* Using channels

A channel connects the main and boring goroutines so they can communicate.

.play _code/changoboring.go /START1/,/STOP1/
.code _code/changoboring.go /START2/,/STOP2/

* Synchronization

When the main function executes <â€“c, it will wait for a value to be sent.

Similarly, when the boring function executes c <â€“ value, it waits for a receiver to be ready.

A sender and receiver must both be ready to play their part in the communication. Otherwise we wait until they are.

Thus channels both communicate and synchronize.

* The Go approach

Don't communicate by sharing memory, share memory by communicating.

* "Patterns"

* Generator: function that returns a channel

Channels are first-class values, just like strings or integers.

.play _code/generatorboring.go /START1/,/STOP1/
.code _code/generatorboring.go /START2/,/STOP2/

* Channels as a handle on a service

Our boring function returns a channel that lets us communicate with the boring service it provides.

We can have more instances of the service.

.play _code/generator2boring.go /START1/,/STOP1/

* Multiplexing

These programs make Joe and Ann count in lockstep.
We can instead use a fan-in function to let whosoever is ready talk.

.code _code/faninboring.go /START3/,/STOP3/
.play _code/faninboring.go /START1/,/STOP1/

* Fan-in

.image _figs/gophermegaphones.jpg

* Restoring sequencing

Send a channel on a channel, making goroutine wait its turn.

Receive all messages, then enable them again by sending on a private channel.

First we define a message type that contains a channel for the reply.

.code _code/sequenceboring.go /START0/,/STOP0/

* Restoring sequencing.

Each speaker must wait for a go-ahead.

.code _code/sequenceboring.go /START1/,/STOP1/
.code _code/sequenceboring.go /START2/,/STOP2/
.play _code/sequenceboring.go /START3/,/STOP3/

* Select

A control structure unique to concurrency.

The reason channels and goroutines are built into the language.

* Select

The select statement provides another way to handle multiple channels.
It's like a switch, but each case is a communication:

- All channels are evaluated.
- Selection blocks until one communication can proceed, which then does.
- If multiple can proceed, select chooses pseudo-randomly.
- A default clause, if present, executes immediately if no channel is ready.

.code _code/select.go /START0/,/STOP0/

* Fan-in again

Rewrite our original fanIn function. Only one goroutine is needed. Old:

.code _code/faninboring.go /START3/,/STOP3/

* Fan-in using select

Rewrite our original fanIn function. Only one goroutine is needed. New:

.play _code/selectboring.go /START3/,/STOP3/

* Timeout using select

The time.After function returns a channel that blocks for the specified duration.
After the interval, the channel delivers the current time, once.

.play _code/timeout.go /START1/,/STOP1/

* Timeout for whole conversation using select

Create the timer once, outside the loop, to time out the entire conversation.
(In the previous program, we had a timeout for each message.)

.play _code/timeoutall.go /START1/,/STOP1/


* Quit channel

We can turn this around and tell Joe to stop when we're tired of listening to him.

.code _code/quit.go /START1/,/STOP1/
.play _code/quit.go /START2/,/STOP2/


* Receive on quit channel

How do we know it's finished? Wait for it to tell us it's done: receive on the quit channel

.code _code/rcvquit.go /START1/,/STOP1/
.play _code/rcvquit.go /START2/,/STOP2/

* Daisy-chain

.play _code/daisy.go /func/,$

* Chinese whispers, gopher style

.image _figs/gophereartrumpet.jpg

* Conclusions

Goroutines and channels make it easy to express complex operations dealing with:

- multiple inputs
- multiple outputs
- timeouts
- failure

And they're fun to use.

* Real-world application?

OK, [[https://golang.org][Go]] is great.

And it's being used by [[https://github.com/golang/go/wiki/GoUsers][many companies]] (beside `Google`): Mozilla, New-York Times, CoreOS, Docker Inc., SpaceX, ...

But what about science?

* Go in science

* Science-y packages

Even if `Go` is relatively new, support for general purpose scientific libraries is there and growing, thanks to the [[https://github.com/gonum][gonum]] community:

- [[https://github.com/gonum/blas][gonum/blas]], a `go` based implementation of Basic Linear Algebra Subprograms
- [[https://github.com/gonum/lapack][gonum/lapack]], a lapack implementation for `go`
- [[https://github.com/gonum/matrix][gonum/matrix]], to work with matrices
- [[https://github.com/gonum/graph][gonum/graph]], to work with graphs
- [[https://github.com/gonum/optimize][gonum/optimize]], for finding the optimum value of functions
- [[https://github.com/gonum/integrate][gonum/integrate]], provides routines for numerical integration
- [[https://github.com/gonum/diff][gonum/diff]], for computing derivatives of a function
- [[https://github.com/gonum/stat][gonum/stat]], for statistics and distributions
- ...


* I/O & Making plots

Plotting data is also rather easy:

- [[http://github.com/gonum/plot][gonum/plot]] (most of the plots seen earlier are made w/ `gonum/plot`)
- [[https://github.com/sbinet/go-gnuplot][github.com/sbinet/go-gnuplot]]

I/O support for some formats:

- [[https://github.com/sbinet/npyio][sbinet/npyio]]: read/write support for [[http://docs.scipy.org/doc/numpy/neps/npy-format.html][NumPy data files]]
- [[https://github.com/ready-steady/mat][ready-steady/mat]], [[https://github.com/sbinet/matfio][sbinet/matfio]]: r/w support for [[http://www.mathworks.com/help/pdf_doc/matlab/apiext.pdf][MATLAB files]]
- [[https://github.com/sbinet/go-hdf5][sbinet/go-hdf5]]: access to [[https://www.hdfgroup.org/HDF5][HDF5]]


* Go for Data Science

A data science community is gathering around [[https://github.com/gopherds][github.com/gopherds]].

- [[https://github.com/gopherds/gophernotes][gopherds/gophernotes]], a [[http://jupyter.org][Jupyter]] kernel for [[https://golang.org][Go]]
- [[https://github.com/gopherds/mybinder-go][gopherds/mybinder-go]], a web-based Jupyter kernel for [[https://golang.org][Go]]
- [[https://github.com/gopherds/resources/tree/master/tooling][gopherds/resources]]: many resources for machine learning, classifiers, neural networks, ...

* Go for data acquisition (DAQ) & monitoring

Community is just starting to gather:

- [[https://github.com/go-daq/canbus][go-daq/canbus]]: CAN bus via `SocketCAN`
- [[https://github.com/go-daq/smbus][go-daq/smbus]]: SMBus (I2C)
- [[https://gitlab.in2p3.fr/avirm/analysis-go][avirm/analysis-go]]: DAQ+monitoring s/w for a medical application
- [[https://github.com/go-lsst/fcs-lpc-motor-ctl][go-lsst/fcs-lpc-motor-ctl]]: a slow control application for LSST (telescope in Chile)
- [[https://users.physics.ox.ac.uk/~ryder/talks/ryder-soliddaq-ieeenss-01Nov16.pdf][SoLiD DAQ (PDF)]]
- [[https://github.com/sbinet-solid/tcp-srv][sbinet-solid/tcp-srv]]: a sensor monitoring application for RaspBerry-3 (LPC SoLid)

* Go in HEP & Astro

[[https://go-hep.org][go-hep.org]] gathers a few HEP-oriented packages, [[https://github.com/astrogo][astrogo]] for Astro/Cosmo:

- [[https://go-hep.org/x/hep/fads][hep/fads]]: a fast detector simulation toolkit, built on top of [[https://go-hep.org/x/hep/fwk][hep/fwk]]
- [[https://go-hep.org/x/hep/fit][hep/fit]]: a WIP package for fitting data
- [[https://go-hep.org/x/hep/fmom][hep/fmom]]: a 4-vectors library
- [[https://go-hep.org/x/hep/hbook][hep/hbook]]: histograms and n-tuples (WIP)
- [[https://go-hep.org/x/hep/hplot][hep/hplot]]: interactive plotting (WIP)
- [[https://go-hep.org/x/hep/hepmc][hep/hepmc]]: HepMC in pure Go (EDM + I/O)
- [[https://go-hep.org/x/hep/hepevt][hep/hepevt]],[[https://go-hep.org/x/hep/heppdt][hep/heppdt]]: HEPEVT bindings and HEP particle data table
- [[https://go-hep.org/x/hep/lhef][hep/lhef]], [[https://go-hep.org/x/hep/slha][hep/slha]]: Les Houches Event File format and SUSY Les Houches Accord I/O
- [[https://go-hep.org/x/cgo/croot][hep/croot]]: bindings to a subset of ROOT I/O
- [[https://go-hep.org/x/hep/rio][hep/rio]], [[https://go-hep.org/x/hep/sio][hep/sio]]: go-hep record oriented I/O and LCIO I/O
- [[https://github.com/astrogo/fitsio][astrogo/fitsio]]: r/w access to `FITS` files

* Go in science

- Biology: [[https://github.com/biogo/biogo][biogo]]
- Chemistry: [[http://gochem.org/][gochem]]

* Conclusions

[[https://golang.org][Go]] improves on `C/C++/Java/...` and addresses `C/C++` and `python` deficiencies:

- code distribution
- code installation
- compilation/development speed
- runtime speed
- simple language

and:

- serviceable standard library ([[https://golang.org/pkg][stdlib doc]])
- builtin facilities to tackle concurrency programming

* Conclusions

Don't communicate by sharing memory, share memory by communicating.

Go is great at writing small and large (concurrent) programs.
Also true for *science-y* programs, even if the amount of libraries can still be improved.

.image _figs/funfast.svg 320 _

Write your next tool/analysis/simulation/software in [[https://golang.org/][Go]]?

* Acknowledgements / resources

.link https://tour.golang.org
.link https://talks.golang.org/2012/splash.slide
.link https://talks.golang.org/2012/goforc.slide
.link https://talks.golang.org/2012/waza.slide
.link https://talks.golang.org/2012/concurrency.slide
.link https://talks.golang.org/2013/advconc.slide
.link https://talks.golang.org/2014/gocon-tokyo.slide
.link https://talks.golang.org/2015/simplicity-is-complicated.slide
.link https://talks.golang.org/2016/applicative.slide
.link https://agenda.infn.it/getFile.py/access?contribId=24&sessionId=3&resId=0&materialId=slides&confId=11680

